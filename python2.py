# -*- coding: utf-8 -*-
"""Python2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_CN0jV1NURKP-IPcVDpYBQmDnKas0qKL
"""

import numpy as np
import pandas as pd

v = np.array([1, 2, 3, 4, 5, 6, 7])
s1 = pd.Series(v)
print(s1)

import numpy as np
import pandas as pd

v = np.array([1, 2, 3, 4, 5, 6, 7])

s1 = pd.Series(v)
data_type_s1 = s1.dtype

print("Data type of Series s1:", data_type_s1)

import numpy as np
import pandas as pd

v = np.array([1, 2, 3, 4, 5, 6, 7])
item_size = v.itemsize

print("Number of bytes allocated to each item:", item_size)

import numpy as np
import pandas as pd

v = np.array([1, 2, 3, 4, 5, 6, 7])

s1 = pd.Series(v)
bytes_used = s1.nbytes

print("Number of bytes consumed by Series s1:", bytes_used)

import numpy as np
import pandas as pd

v = np.array([1, 2, 3, 4, 5, 6, 7])

s1 = pd.Series(v)
series_length = len(s1)

# Display the "shape"
print("Shape of Series s1:", (series_length,))

import numpy as np
import pandas as pd

v = np.array([1, 2, 3, 4, 5, 6, 7])

s1 = pd.Series(v)
dimensions = s1.ndim

# Display the number of dimensions
print("Number of dimensions in Series s1:", dimensions)

import numpy as np
import pandas as pd

v = np.array([1, 2, 3, 4, 5, 6, 7])

s1 = pd.Series(v)
series_length = len(s1)

# Display the length
print("Length of Series s1:", series_length)

# Display the result
print("Number of non-null values in Series s1:", non_null_count)

import numpy as np
import pandas as pd

s1 = pd.Series([1, 2, 3, 4, 5, 6, 7])
series_size = s1.size

print("Size of Series s1:", series_size)

import pandas as pd

# Create a Pandas Series from a list with custom index labels
s0 = pd.Series([1, 2, 3], index=['a', 'b', 'c'])

# Display the Pandas Series
print(s0)

import pandas as pd

s1 = pd.Series([1, 2, 3, 4, 5, 6, 7])

# Modify the index of the Series
s1.index = ['a', 'b', 'c', 'd', 'e', 'f', 'g']

# Display the modified Series
print(s1)

import numpy as np
import pandas as pd

v2 = np.random.random(10)

ind2 = np.arange(0, 10)

s = pd.Series(v2, ind2)

# Display the random values, index, and the Pandas Series
print("Random values:", v2)
print("Index values:", ind2)
print("Pandas Series:")
print(s)

import pandas as pd

dict1 = {'a1': 10, 'a2': 20, 'a3': 30, 'a4': 40}
s3 = pd.Series(dict1)

print(s3)

import pandas as pd

s = pd.Series(99, index=[0, 1, 2, 3, 4, 5])

# Display the Pandas Series
print(s)

import pandas as pd
import numpy as np

# Create a Pandas Series
s = pd.Series(np.random.random(10))

# Display the original Pandas Series
print("Original Series:")
print(s)

all_elements = s[:]

# Display all elements of the Series
print("\nAll Elements of the Series:")
print(all_elements)

# Using slicing notation to get the first three elements
first_three_sliced = s[:3]
print("\nFirst Three Elements using slicing:")
print(first_three_sliced)

# Using slicing notation to get the last element
last_element_sliced = s[-1:]
print("\nLast Element using slicing:")
print(last_element_sliced)

# Using slicing notation to get the first 4 elements
first_four_sliced = s[:4]
print("\nFirst Four Elements using slicing:")
print(first_four_sliced)

# Using slicing notation to exclude the last two elements
except_last_two_sliced = s[:-2]
print("\nSeries except Last Two Elements using slicing:")
print(except_last_two_sliced)

# Using slicing notation to exclude the last element
except_last_sliced = s[:-1]
print("\nSeries except Last Element using slicing:")
print(except_last_sliced)

# Using slicing notation to get the last two elements
last_two_sliced = s[-2:]
print("\nLast Two Elements using slicing:")
print(last_two_sliced)

# Using slicing notation to get the last element
last_element_sliced = s[-1:]
print("\nLast Element using slicing:")
print(last_element_sliced)

# Using slicing notation to get a slice from the third-to-last to the second-to-last element
slice_elements = s[-3:-1]

print("\nSliced Elements:")
print(slice_elements)

import pandas as pd

s1 = pd.Series([10, 20, 30])
s2 = s1.copy()

# Display the original series (s1)
print("Original Series (s1):")
print(s1)

# Display the modified series (s2)
print("\nModified Series (s2):")
print(s2)

import pandas as pd

s3 = pd.Series({'a1': 10, 'a2': 20, 'a3': 30, 'a4': 40})
print(s3)

import pandas as pd

s2 = pd.Series([10, 20, 30])
s3 = pd.Series({'a1': 10, 'a2': 20, 'a3': 30, 'a4': 40})

# Append s2 and s3
s4 = s2.append(s3)

# Display the appended series
print("Appended Series (s4):")
print(s4)

import pandas as pd

s4 = pd.Series({'0': 10, '1': 20, '2': 30, 'a1': 10, 'a2': 20, 'a3': 30, 'a4': 40})

# Drop the element with index label 'a4' with inplace=False
new_s4 = s4.drop('a4', inplace=False)

# Display the original and modified series
print("Original Series (s4):")
print(s4)

print("\nModified Series (new_s4):")
print(new_s4)

import pandas as pd

s2 = pd.Series([10, 20, 30])
s3 = pd.Series({'a1': 10, 'a2': 20, 'a3': 30, 'a4': 40})

# Append s2 and s3
s4 = s2.append(s3)

# Display the appended series
print("Appended Series (s4):")
print(s4)

import pandas as pd

s4 = pd.Series({'0': 10, '1': 20, '2': 30, 'a1': 10, 'a2': 20, 'a3': 30, 'a4': 40})

# Drop the element with index label 'a4' with inplace=True
s4.drop('a4', inplace=True)

# Display the modified series
print("Modified Series (s4):")
print(s4)

import pandas as pd

s4 = pd.Series({'0': 10, '1': 20, '2': 30, 'a1': 10, 'a2': 20, 'a3': 30, 'a4': 40})

# Append a new element with index label 'a4' and value 7
s4 = s4.append(pd.Series({'a4': 7}))

# Display the modified series
print("Modified Series (s4):")
print(s4)

import numpy as np
import pandas as pd

# Create NumPy arrays
v1 = np.array([10, 20, 30])
v2 = np.array([1, 2, 3])

# Create Pandas Series from NumPy arrays
s1 = pd.Series(v1)
s2 = pd.Series(v2)

# Display the Pandas Series
print("Series 1 (s1):")
print(s1)

print("\nSeries 2 (s2):")
print(s2)

import numpy as np
import pandas as pd

# Create NumPy arrays
v1 = np.array([10, 20, 30])
v2 = np.array([1, 2, 3])

# Create Pandas Series from NumPy arrays
s1 = pd.Series(v1)
s2 = pd.Series(v2)

# Perform element-wise addition of the two series
result = s1.add(s2)

print("Result of s1 + s2:")
print(result)

import numpy as np
import pandas as pd

# Create NumPy arrays
v1 = np.array([10, 20, 30])
v2 = np.array([1, 2, 3])

# Create Pandas Series from NumPy arrays
s1 = pd.Series(v1)
s2 = pd.Series(v2)

# Perform element-wise subtraction of the two series
result = s1.sub(s2)

print("Result of s1 - s2:")
print(result)

import numpy as np
import pandas as pd

# Create NumPy arrays
v1 = np.array([10, 20, 30])
v2 = np.array([1, 2, 3])

# Create Pandas Series from NumPy arrays
s1 = pd.Series(v1)
s2 = pd.Series(v2)

# Perform element-wise subtraction of the two series using subtract
result = s1.subtract(s2)

# Display the result
print("Result of s1 - s2:")
print(result)

import numpy as np
import pandas as pd

# Create a Pandas Series
v1 = np.array([10, 20, 30])
s1 = pd.Series(v1)

# Increment all numbers in the series by 9
result = s1.add(9)

# Display the result
print("Original Series (s1):")
print(s1)

print("\nResult after incrementing by 9:")
print(result)

import numpy as np
import pandas as pd

# Create NumPy arrays
v1 = np.array([10, 20, 30])
v2 = np.array([1, 2, 3])

# Create Pandas Series from NumPy arrays
s1 = pd.Series(v1)
s2 = pd.Series(v2)

# Perform element-wise multiplication of the two series
result = s1.mul(s2)

# Display the result
print("Result of s1 * s2:")
print(result)

import numpy as np
import pandas as pd

# Create NumPy arrays
v1 = np.array([10, 20, 30])
v2 = np.array([1, 2, 3])

# Create Pandas Series from NumPy arrays
s1 = pd.Series(v1)
s2 = pd.Series(v2)

# Perform element-wise multiplication of the two series using multiply
result = s1.multiply(s2)

# Display the result
print("Result of s1 * s2:")
print(result)

import numpy as np
import pandas as pd

# Create a Pandas Series
v1 = np.array([10, 20, 30])
s1 = pd.Series(v1)

# Multiply each element in the series by 1000 using multiply
result = s1.multiply(1000)

# Display the result

print("\nResult after multiplying by 1000:")
print(result)

import numpy as np
import pandas as pd

# Create NumPy arrays
v1 = np.array([10, 20, 30])
v2 = np.array([1, 2, 3])

# Create Pandas Series from NumPy arrays
s1 = pd.Series(v1)
s2 = pd.Series(v2)

# Perform element-wise division of the two series using divide
result = s1.divide(s2)

# Display the result
print("Result of s1 / s2:")
print(result)

import numpy as np
import pandas as pd

# Create NumPy arrays
v1 = np.array([10, 20, 30])
v2 = np.array([1, 2, 3])

# Create Pandas Series from NumPy arrays
s1 = pd.Series(v1)
s2 = pd.Series(v2)

# Perform element-wise division of the two series using div
result = s1.div(s2)

# Display the result
print("Result of s1 / s2:")
print(result)

import numpy as np
import pandas as pd

# Create a Pandas Series
v1 = np.array([10, 20, 30])
s1 = pd.Series(v1)

# Find the maximum value in the series
max_value = s1.max()

# Display the result
print("Maximum value in s1:", max_value)

import numpy as np
import pandas as pd

# Create a Pandas Series
v1 = np.array([10, 20, 30])
s1 = pd.Series(v1)

# Find the minimum value in the series
min_value = s1.min()

# Display the result
print("Minimum value in s1:", min_value)

import numpy as np
import pandas as pd

# Create a Pandas Series
v1 = np.array([10, 20, 30])
s1 = pd.Series(v1)

# Calculate the average value of the series
average_value = s1.mean()

# Display the result
print("Average value of s1:", average_value)

import numpy as np
import pandas as pd

# Create a Pandas Series
v1 = np.array([10, 20, 30])
s1 = pd.Series(v1)

# Calculate the median value of the series
median_value = s1.median()

# Display the result
print("Median value of s1:", median_value)

import numpy as np
import pandas as pd

# Create a Pandas Series
v1 = np.array([10, 20, 30])
s1 = pd.Series(v1)

# Calculate the standard deviation of the series
std_deviation = s1.std()

# Display the result
print("Standard deviation of s1:", std_deviation)

import numpy as np
import pandas as pd

# Create two Pandas Series with different values
v1 = np.array([10, 20, 30])
v2 = np.array([10, 20, 30, 40])
s1 = pd.Series(v1)
s2 = pd.Series(v2)

# Check if the two Series are equal
are_equal = s1.equals(s2)

# Display the result
print("Are s1 and s2 equal?", are_equal)

import numpy as np
import pandas as pd

# Create a Pandas Series
v1 = np.array([10, 20, 30])
s1 = pd.Series(v1)

# Assign s1 to s4
s4 = s1

# Modify s4
s4[0] = 99

# Display both s1 and s4
print("s1:", s1)
print("s4:", s4)

import numpy as np
import pandas as pd

# Create a Pandas Series
v1 = np.array([10, 20, 30])
s1 = pd.Series(v1)

s4 = s1.copy()

# Check if the two Series are equal
are_equal = s1.equals(s4)

# Display the result
print("Are s1 and s4 equal?", are_equal)

import pandas as pd

# Create a Pandas Series with custom indices
s5 = pd.Series([1, 1, 2, 2, 3, 3], index=[0, 1, 2, 3, 4, 5])

# Display the Series
print("s5:")
print(s5)

import pandas as pd

# Create a Pandas Series with custom indices
s5 = pd.Series([1, 1, 2, 2, 3, 3], index=[0, 1, 2, 3, 4, 5])

# Use value_counts to get counts of unique values
value_counts_result = s5.value_counts()

# Display the result
print("Value counts for s5:")
print(value_counts_result)

import pandas as pd

df = pd.DataFrame()

print("Empty DataFrame:")
print(df)

import pandas as pd

# List of programming languages
lang = ['Java', 'Python', 'C', 'C++']

# Create a DataFrame using the list
df = pd.DataFrame(lang)

# Display the DataFrame
print("DataFrame from List:")
print(df)

import pandas as pd

# List of programming languages
lang = ['Java', 'Python', 'C', 'C++']

# Create a DataFrame using the list
df = pd.DataFrame(lang)

# List of ratings
rating = [1, 2, 3, 4]

# Add a new column '1' to the DataFrame with the rating values
df[1] = rating

# Display the updated DataFrame
print("Updated DataFrame with Rating Column:")
print(df)

import pandas as pd

# List of programming languages
lang = ['Java', 'Python', 'C', 'C++']

# Create a DataFrame using the list
df = pd.DataFrame(lang)

# List of ratings
rating = [1, 2, 3, 4]

# Add a new column '1' to the DataFrame with the rating values
df[1] = rating

# Update column names
df.columns = ['Language', 'Rating']

# Display the updated DataFrame
print("Updated DataFrame with Custom Column Names:")
print(df)

import pandas as pd

# List of dictionaries
data = [{'a': 1, 'b': 2}, {'a': 5, 'b': 10, 'c': 20}]

# Create DataFrame without specifying index and columns
df2 = pd.DataFrame(data)
print("DataFrame df2:")
print(df2)

df3 = pd.DataFrame(data, index=['row1', 'row2'], columns=['a', 'b'])
print("\nDataFrame df3:")
print(df3)

df4 = pd.DataFrame(data, index=['row1', 'row2'], columns=['a', 'b', 'c'])
print("\nDataFrame df4:")
print(df4)

df5 = pd.DataFrame(data, index=['row1', 'row2'], columns=['a', 'b', 'c', 'd'])
print("\nDataFrame df5:")
print(df5)

import pandas as pd

# Create DataFrame from Dictionary
df0 = pd.DataFrame({'ID': [1, 2, 3, 4], 'Name': ['Asif', 'Basit', 'Ross', 'John']})

# Display the DataFrame
print("DataFrame df0:")
print(df0)

import pandas as pd

# Dictionary of Series
data_dict = {'A': pd.Series([1, 2, 3], index=['a', 'b', 'c']),
             'B': pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}

# Create DataFrame from Dictionary of Series
df1 = pd.DataFrame(data_dict)

# Display the DataFrame
print("DataFrame df1:")
print(df1)

import pandas as pd

# Create date range
dates = pd.date_range(start='2020-01-20', end='2020-01-26')

# Display the date range
print("Date Range:")
print(dates)

import pandas as pd

# Create date range for the next 7 days starting from today
dates = pd.date_range('today', periods=7)

# Display the date range
print("Date Range for the Next 7 Days:")
print(dates)

import pandas as pd

# Create date range starting from '2020-01-20' for the next 7 days
dates = pd.date_range(start='2020-01-20', periods=7)

# Display the date range
print("Date Range for the Next 7 Days from '2020-01-20':")
print(dates)

import numpy as np

# Generate a 7x7 array of random numbers between 0 and 1
M = np.random.random((7, 7))

# Display the array
print("Random 7x7 Array:")
print(M)

import pandas as pd
import numpy as np

# NumPy array M
M = np.random.random((7, 7))

# Date range
dates = pd.date_range(start='2020-01-20', periods=7)

# Create DataFrame with M and date index
dframe = pd.DataFrame(M, index=dates)

# Display the DataFrame
print("DataFrame with Date Index:")
print(dframe)

import pandas as pd

dframe.columns = ['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7']

# Display the DataFrame with updated column names
print("DataFrame with Updated Column Names:")
print(dframe)

import pandas as pd

# Displaying the index of the DataFrame
print("DataFrame Index:")
print(dframe.index)

import pandas as pd

# Displaying the column names of the DataFrame
print("DataFrame Column Names:")
print(dframe.columns)

import pandas as pd

# Displaying the data types of each column in the DataFrame
print("Data Types of Each Column:")
print(dframe.dtypes)

import pandas as pd

# Sorting DataFrame by Column 'C1' in Ascending Order
sorted_dframe = dframe.sort_values(by='C1')

# Displaying the sorted DataFrame
print("Sorted DataFrame by Column 'C1' in Ascending Order:")
print(sorted_dframe)

import pandas as pd

# Sorting DataFrame by Column 'C1' in Descending Order
sorted_dframe_desc = dframe.sort_values(by='C1', ascending=False)

# Displaying the sorted DataFrame in Descending Order
print("Sorted DataFrame by Column 'C1' in Descending Order:")
print(sorted_dframe_desc)

import pandas as pd
import numpy as np

# Creating DataFrame df1
data = {'A': [1.0, 2.0, 3.0, np.nan],
        'B': [1, 2, 3, 4]}

df1 = pd.DataFrame(data, index=['a', 'b', 'c', 'd'])

# Displaying the DataFrame df1
print("DataFrame df1:")
print(df1)

import pandas as pd
import numpy as np

# Deleting Column 'B' using "del" function
del df1['B']

# Displaying the updated DataFrame df1
print("Updated DataFrame df1 after deleting column 'B':")
print(df1)

import pandas as pd
import numpy as np

# Creating DataFrame df5
data = {'a': [1, 5],
        'b': [2, 10],
        'c': [np.nan, 20.0],
        'd': [np.nan, np.nan]}

df5 = pd.DataFrame(data, index=['row1', 'row2'])

# Displaying the DataFrame df5
print("DataFrame df5:")
print(df5)

import pandas as pd
import numpy as np

# Deleting Column 'c' using pop()
df5.pop('c')

# Displaying the updated DataFrame df5
print("Updated DataFrame df5 after deleting column 'c':")
print(df5)

import pandas as pd

# Creating DataFrame df12
dict = {'A': pd.Series([1, 2, 3, 11], index=['a', 'b', 'c', 'd']),
        'B': pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}

df12 = pd.DataFrame(dict)

# Displaying the DataFrame df12
print("DataFrame df12:")
print(df12)

import pandas as pd

# Deleting Column 'A' using drop method
df12.drop(['A'], axis=1, inplace=True)

# Displaying the updated DataFrame df12
print("Updated DataFrame df12 after deleting column 'A':")
print(df12)

import pandas as pd
import numpy as np

# Creating DataFrame df10
col1 = np.linspace(10, 100, 30)
col2 = np.random.randint(10, 100, 30)
df10 = pd.DataFrame({"C1": col1, "C2": col2})

# Displaying the DataFrame df10
print("DataFrame df10:")
print(df10)

# Deleting rows with index values 17, 18, and 19 using drop method
df10 = df10.drop([17, 18, 19], axis=0)

# Displaying the updated DataFrame df10
print("Updated DataFrame df10 after deleting rows with index values 17, 18, and 19:")
print(df10)

# Deleting row with index value 16 without using assignment operation
df10.drop([16], axis=0, inplace=True)

# Displaying the updated DataFrame df10
print("Updated DataFrame df10 after deleting row with index value 16:")
print(df10)

# Delete row with index value 5 without using assignment
df10.drop(df10.index[5], inplace=True)

# Display the modified DataFrame
print(df10)

# Delete the first three rows
df10 = df10.iloc[3:,]

# Display the modified DataFrame
print(df10)

# Delete the last four rows
df10 = df10.iloc[:-4,]

# Display the modified DataFrame
print(df10)

# Keep only the top 10 rows
df10 = df10.iloc[:10,]

# Display the modified DataFrame
print(df10)

# Find indices where the value in column 'C2' is equal to 56
indices = df10.index[df10['C2'] == 56].tolist()

# Display the modified DataFrame and the indices
print("Modified DataFrame:")
print(df10)
print("\nIndices where 'C2' is equal to 56:", indices)

# Delete rows where the value in column 'C2' is equal to 56
df10.drop(df10.index[df10['C2'] == 56].tolist(), axis=0, inplace=True)

# Display the modified DataFrame
print(df10)

# Delete rows where the value in column 'C2' is equal to 79
df10 = df10.drop(df10[df10["C2"] == 79].index)

# Display the modified DataFrame
print(df10)

# Delete all rows where the value in column 'C2' is equal to 44
df10 = df10[df10.C2 != 44]

# Display the modified DataFrame
print(df10)

# Delete all rows where the value in column 'C2' is either 21 or 48
df10 = df10[~df10.C2.isin([21, 48])]

# Display the modified DataFrame
print(df10)

# Keep all rows where the value in column 'C2' is either 42 or 76
df10 = df10[df10.C2.isin([42, 76])]

# Display the modified DataFrame
print(df10)

import pandas as pd

dict = {'A': pd.Series([1, 2, 3, 11], index=['a', 'b', 'c', 'd']),
        'B': pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}

df11 = pd.DataFrame(dict)
print(df11)

# Delete all rows with label "d"
df11.drop("d", axis=0, inplace=True)

# Display the modified DataFrame
print(df11)

import pandas as pd

df13 = pd.DataFrame({
    'ID': [1, 2, 3, 4],
    'Name': ['Asif', 'Basit', 'Ross', 'John'],
    'location': ['India', 'Australia', 'UK', 'US']
})

print(df13)

# Identify the index where conditions are met
ind = df13[((df13.Name == 'Ross') & (df13.ID == 3) & (df13.location == 'UK'))].index

# Drop the row with the identified index
df13.drop(ind, inplace=True)

# Display the modified DataFrame
print(df13)

import pandas as pd

# Creating a DataFrame
data = {'Language': ['Java', 'Python', 'C', 'C++'],
        'Rating': [1, 2, 3, 4]}

df = pd.DataFrame(data)

# Displaying the DataFrame
print(df)

import pandas as pd

# Creating a DataFrame
data = {'Language': ['Java', 'Python', 'C', 'C++'],
        'Rating': [1, 2, 3, 4]}

df = pd.DataFrame(data)

# Setting new index values
df.index = [1, 2, 3, 4]

# Displaying the DataFrame with the new index
print(df)

import pandas as pd

data = {'Language': ['Java', 'Python', 'C', 'C++'],
        'Rating': [1, 2, 3, 4]}

df = pd.DataFrame(data)
df.index = [1, 2, 3, 4]

# Selecting the row with the label 1
selected_row = df.loc[1]

# Displaying the selected row
print(selected_row)

import pandas as pd

# Assuming df is your DataFrame
data = {'Language': ['Java', 'Python', 'C', 'C++'],
        'Rating': [1, 2, 3, 4]}

df = pd.DataFrame(data)
df.index = [1, 2, 3, 4]

# Selecting the row at position 1
selected_row = df.iloc[1]

# Displaying the selected row
print(selected_row)

import pandas as pd

# Assuming df is your DataFrame
data = {'Language': ['Java', 'Python', 'C', 'C++'],
        'Rating': [1, 2, 3, 4]}

df = pd.DataFrame(data)
df.index = [1, 2, 3, 4]

# Selecting rows with labels 1 and 2
selected_rows = df.loc[1:2]

# Displaying the selected rows
print(selected_rows)

import pandas as pd

# Assuming df is your DataFrame
data = {'Language': ['Java', 'Python', 'C', 'C++'],
        'Rating': [1, 2, 3, 4]}

df = pd.DataFrame(data)
df.index = [1, 2, 3, 4]

# Selecting the row at integer position 1
selected_row = df.iloc[1:2]

# Displaying the selected row
print(selected_row)

import pandas as pd

# Assuming df is your DataFrame
data = {'Language': ['Java', 'Python', 'C', 'C++'],
        'Rating': [1, 2, 3, 4]}

df = pd.DataFrame(data)
df.index = [1, 2, 3, 4]

# Selecting rows where 'Rating' is greater than 2
selected_rows = df.loc[df.Rating > 2]

# Displaying the selected rows
print(selected_rows)

import pandas as pd

# Creating a DataFrame df1
data = {'A': [1.0, 2.0, 3.0, None]}
df1 = pd.DataFrame(data, index=['a', 'b', 'c', 'd'])

# Displaying the DataFrame
print(df1)

import pandas as pd

data = {'A': [1.0, 2.0, 3.0, None]}
df1 = pd.DataFrame(data, index=['a', 'b', 'c', 'd'])

# Selecting the row with label 'a'
selected_row = df1.loc['a']

# Displaying the selected row
print(selected_row)

import pandas as pd

data = {
    'C1': [0.462275, 0.174824, 0.935155, 0.752730, 0.031982, 0.341722, 0.056187],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [0.716427, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 0.665366, 0.793219],
    'C6': [0.110450, 0.314032, 0.579636, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [0.583966, 0.474371, 0.657638, 0.396033, 0.613853, 0.280308, 0.522509],
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

# Print the DataFrame
print(dframe)

selected_rows = dframe['2020-01-20':'2020-01-22']
print(selected_rows)

selected_data = dframe.loc[:, ['C1', 'C7']]
print(selected_data)

selected_data = dframe[dframe['C1'] > 0.5]
print(selected_data)

selected_data = dframe[(dframe['C1'] > 0.5) & (dframe['C4'] > 0.5)]
print(selected_data)

selected_value = dframe.iloc[0, 0]
print(selected_value)

selected_data = dframe.iloc[:, 0:3]
print(selected_data)

dframe.at[dframe.index[0], 'C1'] = 10
print(dframe)

selected_rows = dframe[dframe['C1'].isin([10, 20])]
print(selected_rows)

import pandas as pd

data = {
    'C1': [0.462275, 0.174824, 0.935155, 0.752730, 0.031982, 0.341722, 0.056187],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [0.716427, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 0.665366, 0.793219],
    'C6': [0.110450, 0.314032, 0.579636, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [0.583966, 0.474371, 0.657638, 0.396033, 0.613853, 0.280308, 0.522509],
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

# Set value of 888 for all elements in column 'C1'
dframe['C1'] = 888

# Display the updated DataFrame
print(dframe)

# Set value of 777 for the first three rows in column 'C6'
dframe.loc[0:3, 'C6'] = 777

# Display the updated DataFrame
print(dframe)

# Set value of 333 in the first row and third column
dframe.iat[0, 2] = 333

# Display the updated DataFrame
print(dframe)

# Set value of 555 in the first row and third column using iloc
dframe.iloc[0, 2] = 555

# Display the updated DataFrame
print(dframe)

import pandas as pd

data = {
    'C1': [0.462275, 0.174824, 0.935155, 0.752730, 0.031982, 0.341722, 0.056187],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [0.716427, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 0.665366, 0.793219],
    'C6': [0.110450, 0.314032, 0.579636, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [0.583966, 0.474371, 0.657638, 0.396033, 0.613853, 0.280308, 0.522509],
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

# Create a deep copy of the original DataFrame
dframe1 = dframe.copy(deep=True)

# Modify the copied DataFrame without affecting the original one
dframe1[(dframe1['C1'] > 0.5) & (dframe1['C4'] > 0.5)] = 0

# Select rows where the value in column 'C1' is equal to 0
selected_rows = dframe1[dframe1['C1'] == 0]

# Display the modified copied DataFrame and the selected rows
print("Modified Copied DataFrame:")
print(dframe1)
print("\nSelected Rows where C1 == 0:")
print(selected_rows)

import pandas as pd

data = {
    'C1': [0.462275, 0.174824, 0.935155, 0.752730, 0.031982, 0.341722, 0.056187],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [0.716427, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 0.665366, 0.793219],
    'C6': [0.110450, 0.314032, 0.579636, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [0.583966, 0.474371, 0.657638, 0.396033, 0.613853, 0.280308, 0.522509],
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

# Create a deep copy of the original DataFrame
dframe1 = dframe.copy(deep=True)

# Modify the copied DataFrame without affecting the original one
dframe1[(dframe1['C1'] > 0.5) & (dframe1['C4'] > 0.5)] = 0

# Replace zeros in column 'C1' with 99
dframe1.loc[dframe1['C1'] == 0, 'C1'] = 99

# Display the modified copied DataFrame
print("Modified Copied DataFrame:")
print(dframe1)

import pandas as pd

data = {
    'C1': [0.462275, 0.174824, 0.935155, 0.752730, 0.031982, 0.341722, 0.056187],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [0.716427, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 0.665366, 0.793219],
    'C6': [0.110450, 0.314032, 0.579636, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [0.583966, 0.474371, 0.657638, 0.396033, 0.613853, 0.280308, 0.522509],
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

# Set value of 888 for all elements in column 'C1'
dframe['C1'] = 888

# Set value of 777 for the first three rows in column 'C6'
dframe.loc[0:3, 'C6'] = 777

# Set value of 555 in the first row and third column using iloc
dframe.iloc[0, 2] = 555

# Display the updated DataFrame
print(dframe)

import pandas as pd
import numpy as np

data = {
    'C1': [888.0, 888.0, 888.0, 888.0, 888.0, 888.0, 888.0],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [0.716427, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 0.665366, 0.793219],
    'C6': [777.0, 777.0, 777.0, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [np.NaN, np.NaN, np.NaN, 0.396033, 0.613853, np.NaN, 0.522509],
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

# Set specific ranges of values to NaN
dframe.loc[0:8, 'C7'] = np.NaN
dframe.loc[0:2, 'C6'] = np.NaN
dframe.loc[5:6, 'C5'] = np.NaN

# Display the updated DataFrame
print(dframe)

result = dframe.notna()
print(result)

result = dframe.isna()
print(result)

import pandas as pd
import numpy as np

data = {
    'C1': [888.0, 888.0, 888.0, 888.0, 888.0, 888.0, 888.0],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [555, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, np.NaN, 0.793219],
    'C6': [np.NaN, np.NaN, 777.0, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [np.NaN, np.NaN, np.NaN, np.NaN, np.NaN, np.NaN, np.NaN ],
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

# Fill all null values with 1020
dframe = dframe.fillna(1020)

# Display the updated DataFrame
print(dframe)

import pandas as pd
import numpy as np

data = {
    'C1': [888.0, 888.0, 888.0, 888.0, 888.0, 888.0, 888.0],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [555, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 1020.0, 0.793219],
    'C6': [1020.0, 1020.0, 777.0, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [1020.0, 1020.0, 1020.0, 1020.0, 1020.0, 1020.0, 1020.0],
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

# Set specific ranges of values to NaN
dframe.loc[0:5, 'C7'] = np.NaN
dframe.loc[0:2, 'C6'] = np.NaN
dframe.loc[5:6, 'C5'] = np.NaN

# Display the updated DataFrame
print(dframe)

# Replace null values in Column 'C5' with 123
# Replace null values in Column 'C6' with 789
dframe.fillna(value={'C5': 123, 'C6': 789}, inplace=True)
# Display the updated DataFrame
print(dframe)

import pandas as pd
import numpy as np

data = {
    'C1': [888.0, 888.0, 888.0, 888.0, 888.0, 888.0, 888.0],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [555, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 1020.0, 0.793219],
    'C6': [1020.0, 1020.0, 777.0, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [1020.0, 1020.0, 1020.0, 1020.0, 1020.0, 1020.0, 1020.0],
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

# Set specific ranges of values to NaN
dframe.loc[0:5, 'C7'] = np.NaN
dframe.loc[0:2, 'C6'] = np.NaN
dframe.loc[5:6, 'C5'] = np.NaN

# Replace the first null value in Column 'C7' with 789
dframe.fillna(value={'C7': 789}, limit=1, inplace=True)

# Display the updated DataFrame
print(dframe)

# Drop rows with any null values
dframe.dropna(inplace=True)

# Display the updated DataFrame
print(dframe)

import pandas as pd
import numpy as np

# Your existing DataFrame
data = {
    'C1': [888.0, 888.0, 888.0, 888.0, 888.0, 888.0, 888.0],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [555, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, np.NaN, 0.793219],
    'C6': [np.NaN, np.NaN, 777.0, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [np.NaN, np.NaN, np.NaN, np.NaN, np.NaN, np.NaN, 1020.0],
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

# Drop columns with any null values
dframe.dropna(axis='columns', inplace=True)

# Display the updated DataFrame
print(dframe)

import pandas as pd
import numpy as np

# Create the DataFrame
data = {
    'C1': [888, 888, 888, 888, 888, 888, 888],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [555, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, np.nan, 0.793219],
    'C6': [np.nan, np.nan, 777.0, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 1020.0]
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

# Display the DataFrame
print(dframe)

# Drop rows with null values in either 'C5' or 'C6'
dframe.dropna(subset=['C5', 'C6'], inplace=True)

# Display the updated DataFrame
print(dframe)

import pandas as pd
import numpy as np
from scipy.stats import hmean

data = {
    'C1': [888, 888, 888, 888, 888, 888, 888],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [555, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, np.nan, 0.793219],
    'C6': [np.nan, np.nan, 777.0, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [np.nan, np.nan, np.nan, np.nan, np.nan, 1020.0, 1020.0]
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

# Fill all null values with 55
dframe.fillna(55, inplace=True)

# Display the DataFrame
print(dframe)

# Calculate the mean of each column
column_means = dframe.mean()

# Display the mean of each column
print(column_means)

# Find the maximum value in each column
max_values = dframe.max()

# Display the maximum value in each column
print(max_values)

# Find the minimum value in each column
min_values = dframe.min()

# Display the minimum value in each column
print(min_values)

# Find the median value in each column
median_values = dframe.median()

# Display the median value in each column
print(median_values)

# Calculate the standard deviation for each column
std_values = dframe.std()

# Display the standard deviation for each column
print(std_values)

# Calculate the variance for each column
variance_values = dframe.var()

# Display the variance for each column
print(variance_values)

# Calculate the lower quartile (first quartile) for each column
lower_quartile_values = dframe.quantile(0.25)

# Display the lower quartile for each column
print(lower_quartile_values)

# Calculate the second quartile (median) for each column
median_values = dframe.quantile(0.50)

# Display the median for each column
print(median_values)

# Calculate the upper quartile (third quartile) for each column
upper_quartile_values = dframe.quantile(0.75)

# Display the upper quartile for each column
print(upper_quartile_values)

# Calculate the interquartile range (IQR) for each column
iqr_values = dframe.quantile(0.75) - dframe.quantile(0.25)

# Display the interquartile range for each column
print(iqr_values)

# Calculate the sum of values for each column
sum_values = dframe.sum()

# Display the sum for each column
print(sum_values)

# Generate descriptive statistics for the DataFrame
descriptive_stats = dframe.describe()

# Display the descriptive statistics
print(descriptive_stats)

# Calculate the unbiased skewness for each column
skewness_values = dframe.skew()

# Display the skewness for each column
print(skewness_values)

# Calculate the unbiased kurtosis for each column
kurtosis_values = dframe.kurt()

# Display the kurtosis for each column
print(kurtosis_values)

# Calculate the correlation matrix for the DataFrame
correlation_matrix = dframe.corr()

# Display the correlation matrix
print(correlation_matrix)

# Calculate the covariance matrix for the DataFrame
covariance_matrix = dframe.cov()

# Display the covariance matrix
print(covariance_matrix)

# Update the values in the 'C1' column for rows 3 to 6
dframe.loc[3:6, 'C1'] = 22

# Display the updated DataFrame
print(dframe)

# Calculate the mean of the 'C1' column, handling NaN values
mean_c1 = np.nanmean(dframe['C1'])

# Display the mean
print(mean_c1)

# Calculate the harmonic mean of the 'C1' column, handling NaN values
harmonic_mean_c1 = hmean(dframe['C1'].dropna())

# Display the harmonic mean
print(harmonic_mean_c1)

import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])

# Calculate the median using numpy
median_value = np.median(arr)

# Display the result
print(median_value)

import statistics as st
import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])

# Calculate the low median using the statistics module
low_median_value = st.median_low(arr)

# Display the result
print(low_median_value)

import statistics as st
import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])

# Calculate the high median using the statistics module
high_median_value = st.median_high(arr)

# Display the result
print(high_median_value)

import pandas as pd
import numpy as np
from scipy.stats import hmean

# Create the DataFrame
data = {
    'C1': [888, 888, 888, 22, 22, 22, 888],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [555.000000, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 55.000000, 0.793219],
    'C6': [55.000000, 55.000000,  777.000000, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [55.0, 55.0, 55.0, 55.0, 55.0, 1020.0, 1020.0]
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

mode_value = st.mode(dframe['C7'].dropna())

# Display the mode
print(mode_value)

import pandas as pd
import numpy as np
from scipy.stats import hmean

# Create the DataFrame
data = {
    'C1': [888, 888, 888, 22, 22, 22, 888],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [555.000000, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 55.000000, 0.793219],
    'C6': [55.000000, 55.000000,  777.000000, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [55.0, 55.0, 55.0, 55.0, 55.0, 1020.0, 1020.0]
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

sample_variance_c1 = np.nanvar(dframe['C1'])

# Display the sample variance
print(sample_variance_c1)

import pandas as pd
import numpy as np
from scipy.stats import hmean

# Create the DataFrame
data = {
    'C1': [888, 888, 888, 22, 22, 22, 888],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [555.000000, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 55.000000, 0.793219],
    'C6': [55.000000, 55.000000,  777.000000, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [55.0, 55.0, 55.0, 55.0, 55.0, 1020.0, 1020.0]
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

population_variance_c1 = np.nanvar(dframe['C1'], ddof=0)

# Display the population variance
print(population_variance_c1)

import pandas as pd
import numpy as np
from scipy.stats import hmean

# Create the DataFrame
data = {
    'C1': [888, 888, 888, 22, 22, 22, 888],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [555.000000, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 55.000000, 0.793219],
    'C6': [55.000000, 55.000000,  777.000000, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [55.0, 55.0, 55.0, 55.0, 55.0, 1020.0, 1020.0]
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

sample_std_dev_c1 = np.nanstd(dframe['C1'], ddof=1)

# Display the sample standard deviation
print(sample_std_dev_c1)

import pandas as pd
import numpy as np
from scipy.stats import hmean

# Create the DataFrame
data = {
    'C1': [888, 888, 888, 22, 22, 22, 888],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [555.000000, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 55.000000, 0.793219],
    'C6': [55.000000, 55.000000,  777.000000, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [55.0, 55.0, 55.0, 55.0, 55.0, 1020.0, 1020.0]
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

population_std_dev_c1 = np.nanstd(dframe['C1'], ddof=0)

# Display the population standard deviation
print(population_std_dev_c1)

import pandas as pd
import numpy as np

data = {
    'C1': [888.0, 888.0, 888.0, 22.0, 22.0, 22.0, 888.0],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [555, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 55.0, 55.0],
    'C6': [55.0, 55.0, 777.0, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [55.0, 55.0, 55.0, 55.0, 55.0, 1020.0, 1020.0],
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

# Display the original DataFrame
print("Original DataFrame:")
print(dframe)

import pandas as pd
import numpy as np

data = {
    'C1': [888.0, 888.0, 888.0, 22.0, 22.0, 22.0, 888.0],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [555, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 55.0, 55.0],
    'C6': [55.0, 55.0, 777.0, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [55.0, 55.0, 55.0, 55.0, 55.0, 1020.0, 1020.0],
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

# Finding the maximum value in each column
max_values_per_column = dframe.apply(max)

# Display the result
print(max_values_per_column)

import pandas as pd
import numpy as np

# Your existing DataFrame
data = {
    'C1': [888.0, 888.0, 888.0, 22.0, 22.0, 22.0, 888.0],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [555, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 55.0, 55.0],
    'C6': [55.0, 55.0, 777.0, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [55.0, 55.0, 55.0, 55.0, 55.0, 1020.0, 1020.0],
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

# Finding the minimum value in each column
min_values_per_column = dframe.apply(min)

# Display the result
print(min_values_per_column)

import pandas as pd
import numpy as np

# Your existing DataFrame
data = {
    'C1': [888.0, 888.0, 888.0, 22.0, 22.0, 22.0, 888.0],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [555, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 55.0, 55.0],
    'C6': [55.0, 55.0, 777.0, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [55.0, 55.0, 55.0, 55.0, 55.0, 1020.0, 1020.0],
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

# Finding the sum of values in each column
sum_values_per_column = dframe.apply(sum)

# Display the result
print(sum_values_per_column)

import pandas as pd
import numpy as np

# Your existing DataFrame
data = {
    'C1': [888.0, 888.0, 888.0, 22.0, 22.0, 22.0, 888.0],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [555, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 55.0, 55.0],
    'C6': [55.0, 55.0, 777.0, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [55.0, 55.0, 55.0, 55.0, 55.0, 1020.0, 1020.0],
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

# Finding the sum of values in each column using np.sum
sum_values_per_column = dframe.apply(np.sum)

# Display the result
print(sum_values_per_column)

import pandas as pd
import numpy as np

# Your existing DataFrame
data = {
    'C1': [888.0, 888.0, 888.0, 22.0, 22.0, 22.0, 888.0],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [555, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 55.0, 55.0],
    'C6': [55.0, 55.0, 777.0, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [55.0, 55.0, 55.0, 55.0, 55.0, 1020.0, 1020.0],
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

# Finding the sum of values for each row using np.sum
sum_values_per_row = dframe.apply(np.sum, axis=1)

# Display the result
print(sum_values_per_row)

import pandas as pd
import numpy as np

# Your existing DataFrame
data = {
    'C1': [888.0, 888.0, 888.0, 22.0, 22.0, 22.0, 888.0],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [555, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 55.0, 55.0],
    'C6': [55.0, 55.0, 777.0, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [55.0, 55.0, 55.0, 55.0, 55.0, 1020.0, 1020.0],
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

# Calculate the square root of all values using applymap
sqrt_values = dframe.applymap(np.sqrt)

# Display the result
print(sqrt_values)

import pandas as pd
import math

# Your existing DataFrame
data = {
    'C1': [888.0, 888.0, 888.0, 22.0, 22.0, 22.0, 888.0],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [555, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 55.0, 55.0],
    'C6': [55.0, 55.0, 777.0, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [55.0, 55.0, 55.0, 55.0, 55.0, 1020.0, 1020.0],
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

# Apply math.sqrt element-wise to the entire DataFrame
sqrt_values = dframe.applymap(lambda x: math.sqrt(x) if pd.notnull(x) else x)

# Display the result
print(sqrt_values)

import pandas as pd
import math

data = {
    'C1': [888.0, 888.0, 888.0, 22.0, 22.0, 22.0, 888.0],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [555, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 55.0, 55.0],
    'C6': [55.0, 55.0, 777.0, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [55.0, 55.0, 55.0, 55.0, 55.0, 1020.0, 1020.0],
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

# Convert all elements to float using astype
dframe_float = dframe.astype(float)

# Display the result
print(dframe_float)

import pandas as pd
import numpy as np

data = {
    'C1': [888.0, 888.0, 888.0, 22.0, 22.0, 22.0, 888.0],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [555, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 55.0, 55.0],
    'C6': [55.0, 55.0, 777.0, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [55.0, 55.0, 55.0, 55.0, 55.0, 1020.0, 1020.0],
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

# Using a lambda function to find the minimum value for each column
min_values_per_column = dframe.apply(lambda x: min(x))

# Display the result
print(min_values_per_column)

import pandas as pd
import numpy as np

data = {
    'C1': [888.0, 888.0, 888.0, 22.0, 22.0, 22.0, 888.0],
    'C2': [0.890359, 0.873198, 0.542427, 0.964631, 0.053500, 0.496193, 0.290127],
    'C3': [555, 0.456847, 0.227592, 0.427621, 0.775805, 0.069878, 0.128269],
    'C4': [0.843771, 0.840320, 0.967050, 0.257674, 0.033939, 0.272055, 0.626088],
    'C5': [0.497552, 0.783311, 0.564303, 0.550580, 0.083726, 55.0, 55.0],
    'C6': [55.0, 55.0, 777.0, 0.321274, 0.719420, 0.446558, 0.222905],
    'C7': [55.0, 55.0, 55.0, 55.0, 55.0, 1020.0, 1020.0],
}

index = pd.to_datetime(['2020-01-20', '2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24', '2020-01-25', '2020-01-26'])

dframe = pd.DataFrame(data, index=index)

# Using a lambda function to square each element in the DataFrame
squared_values = dframe.apply(lambda x: x * x)

# Display the result
print(squared_values)

import pandas as pd

# Creating DataFrame
daf1 = pd.DataFrame({'id': ['1', '2', '3', '4', '5'], 'Name': ['Asif', 'Basit', 'Bran', 'John', 'David']})

# Displaying the DataFrame
print(daf1)

import pandas as pd

# Creating DataFrame
daf2 = pd.DataFrame({'id': ['1', '2', '6', '7', '8'], 'Score': [40, 60, 80, 90, 70]})

# Displaying the DataFrame
print(daf2)

import pandas as pd

# Creating DataFrame daf1
daf1 = pd.DataFrame({'id': ['1', '2', '3', '4', '5'], 'Name': ['Asif', 'Basit', 'Bran', 'John', 'David']})

# Creating DataFrame daf2
daf2 = pd.DataFrame({'id': ['1', '2', '6', '7', '8'], 'Score': [40, 60, 80, 90, 70]})

# Performing an inner join
result_inner = pd.merge(daf1, daf2, on='id', how='inner')

# Displaying the result
print(result_inner)

import pandas as pd

# Creating DataFrame daf1
daf1 = pd.DataFrame({'id': ['1', '2', '3', '4', '5'], 'Name': ['Asif', 'Basit', 'Bran', 'John', 'David']})

# Creating DataFrame daf2
daf2 = pd.DataFrame({'id': ['1', '2', '6', '7', '8'], 'Score': [40, 60, 80, 90, 70]})

# Performing a full outer join
result_outer = pd.merge(daf1, daf2, on='id', how='outer')

# Displaying the result
print(result_outer)

import pandas as pd

# Creating DataFrame daf1
daf1 = pd.DataFrame({'id': ['1', '2', '3', '4', '5'], 'Name': ['Asif', 'Basit', 'Bran', 'John', 'David']})

# Creating DataFrame daf2
daf2 = pd.DataFrame({'id': ['1', '2', '6', '7', '8'], 'Score': [40, 60, 80, 90, 70]})

# Performing a left outer join
result_left = pd.merge(daf1, daf2, on='id', how='left')

# Displaying the result
print(result_left)

import pandas as pd

# Creating DataFrame daf1
daf1 = pd.DataFrame({'id': ['1', '2', '3', '4', '5'], 'Name': ['Asif', 'Basit', 'Bran', 'John', 'David']})

# Creating DataFrame daf2
daf2 = pd.DataFrame({'id': ['1', '2', '6', '7', '8'], 'Score': [40, 60, 80, 90, 70]})

# Performing a right outer join
result_right = pd.merge(daf1, daf2, on='id', how='right')

# Displaying the result
print(result_right)

import pandas as pd
import glob

# Specify the path to the directory containing CSV files
path = r'C:\Users\Asus\COVID-19-master\csse_covid_19_data\csse_covid_19_daily_reports'

# Get a list of all CSV files in the specified directory
filenames = glob.glob(path + "/*.csv")

# Initialize an empty DataFrame to store the combined data
covid = pd.DataFrame()

# Loop through each CSV file and append its contents to the DataFrame
for f in filenames:
    df = pd.read_csv(f)
    covid = covid.append(df, ignore_index=True, sort=True)

# Display the combined DataFrame
print(covid)

import pandas as pd
import glob

# Specify the path to the directory containing CSV files
path = r'C:\Users\Asus\COVID-19-master\csse_covid_19_data\csse_covid_19_daily_reports'

# Get a list of all CSV files in the specified directory
filenames = glob.glob(path + "/*.csv")

# Initialize an empty DataFrame to store the combined data
covid = pd.DataFrame()

# Loop through each CSV file and append its contents to the DataFrame
for f in filenames:
    df = pd.read_csv(f)
    covid = covid.append(df, ignore_index=True, sort=True)

# Display the top 10 rows of the combined DataFrame
print(covid.head(10))

